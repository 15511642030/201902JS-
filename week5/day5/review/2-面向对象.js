/*
* 面向对象：
*   1. 对象、类、实例三者之间关系
*   对象：js中万物皆对象。对象是封装了很多属性和方法用来存储或者我们调用
*   类：根据事物的特性和特点描述一类事物。
*   实例：是类当中的一个具体事例；
*
*   2. 创建对象的方式（单例模式、高级单例、工厂模式、构造函数...）
*
*   3. 原型、类、实例三者之间的关系
*     3.1 每一个类都是一个函数数据类型，天生自带一个prototype属性；
*     3.2 每一个prototype是对象数据类型的值，天生自带两个属性：constructor，指向当前函数（类）本身;__proto__：指向原型对象自身所属类的原型；
*     3.3 实例也是对象数据类型，也有一个天生自带的属性__proto__ 指向当前实例所属类的原型；
*   4. 原型链：对象属性的查找机制。当我们访问一个对象的属性时，会先在自身的私有属性中查找，如果找到就用私有的属性，如果找不到就会通过__proto__去对象所属类原型上查找，如果找到就使用，找不到就会一直向上查找，一直找到Object.prototype为止，如果没有就返回undefined
*   5. this的问题
*     5.1 事件函数中的this指向绑定当前事件的元素；
*     5.2 自执行函数、定时器、全局作用域中的this是window
*     5.3 箭头函数中this是箭头函数声明时所在作用域中this
*     5.4 方法执行时this的指向，看有没有点，有. 点前面是谁this就是谁，如果没有就是window
*     5.5 构造函数中的this指向当前构造函数的实例；
*     5.6 call、bind、apply用于修改this指向；
*
*   6. 继承
*     6.1 原型链继承
*     6.2 call继承
*     6.3 组合继承
*     6.4 原型式继承
*     6.5 寄生组合式继承
*     6.6 extend
*     6.7 冒充对象
*     ... (除了extend至少说出四种）
*   7. 函数三种角色：普通对象、函数、类
*   8. call、apply、bind三者区别
*
* */